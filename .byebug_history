c
@completed_by
c
exit
@not_completed_by
@completed_by
c
exit
@completed_by
@not_completed_by
c
@not_completed_by = Array.new
@completed_by = Array.new
exit
@course.guards
Training.find_by(course_id: @course.id)
@course
c
@course
c
params
c
@course = Course.create(course_params)
params
c
people = @guards.sort_by { |a| [ a.last_name] }
people = people.sort_by { |a| [ a.last_name] }
people = people.sort_by { |a| [ a.last_name, a.first_name ] }
@guards.sort_by(last_name)
@guards.sort
@guards.sort!
@guards = Guard.all
@guards
@guards.first
@guards.sort_by!{ |m| m.group.last_name.downcase }
@guards.sort_by(:last_name)
@guards.sort_by(last_name)
@guards.sort!
c
UserMailer.account_activation(@user).deliver_now
c
user
c
exit
UserMailer.account_activation(@user).deliver_now
@user
c
user_params
params
c
user_params
params
token
attribute
c
token
toke
attribute
c
user.authenticated?(:activation, params[:id])
user = User.find_by(email: params[:email])
user
user.authenticated?(:activation, params[:id])
c
user
@user
c
@user
c
self
c
user.authenticated?(:activation, params[:id])
c
user.authenticated?(:activation, params[:id])
user = User.find_by(email: params[:email])
user && !user.activated?
user = User.find_by(email: params[:email])
c
params
user
c
mail to: user.email, subject: "Account activation"
@user = user
@user
c
current_user
c
token
toke
c
params
c
user.authenticated?(:activation, params[:id])
continue
authenticated?(attribute, token)
digest.nil?
send("#{attribute}_digest")
continue
params
params[:activation_token]
user.activation_token
user
c
@user.activation_token
@user
token
exit
params[:id]
token
attribute
user.authenticated?(:activation, params[:id])
continue
exit
user.authenticated?(:activation, params[:id])
:activation
params[:id]
user.authenticated?
user.authenticated?(:activation, params[:id])
!user.activated?
user
c
user
session[:user_id]
c
 continue
continue
@user
continua
exit
continue
exit
continue
date_m
continue
Time.at(date)
 testD = Time.at(date) - (date.strftime('%w').to_i-1).days
date.strftime('%w')
(date.strftime('%w').to_i-1).days
 date
(date.strftime('%Y-')+date.strftime('%m-')+day_0.to_s).to_time
day_0
continue
user && user.authenticate(params[:password])
continue
user.id
user && user.authenticate(params[:password])
continue
user.authenticate(params[:password])
user && user.authenticate(params[:password])
 user = User.find_by_email(params[:email])
user.authenticate(params[:password])
 User.find_by_email(params[:email])
params[:email]
continue
@logged_user.role == "master" || @logged_user == @user
 @logged_user.role
"master" || @logged_user == @user
@logged_user == @user
continue
current
model
midel
@logged_user.role
@logged_user
continue
@logged_user.role
@logged_user
continue
@logged_user.role
@logged_user
continue
current
continue
@user
@user.role
@user
continue
@user.role
@user
continue
@user
model
current
continue
@user
current_user
continue
@user
current_user
exit
continue
week_per_guard = find_shifts(guard.guard_id, week_number, all_shifts)
all_shifts = shifts_by_date.where(guard_id: guard.guard_id, site_id: site.site_id)
guard
guards
exit
shifts_by_date.where(guard_id: guard, site_id:site.site_id)exit
guard
shifts_by_date.where(guard_id: guard, site_id:site.site_id)
guards
continue
continua
shifts_by_date.select(:guard_id).uniq { |m| m.site_id  == site.site_id }
site
sites
continue
sites
site
sites = shifts_by_date.select("site_id").uniq
ites = shifts_by_date.select("site_id").uniq
shifts_by_date.select("site_id")
shifts_by_date.select("site_id").uniq
shifts_by_date.all
continue
@session
continue
session[:user_id]
session
continue
session
exit
Session.find(params[:id])
continue
user_params
continue
user_params
continue
user_params
continue
user_params
exit
user_params
exit
 respond_with :json => {:data => @shifts_by_date}
 render :json => {:data => @shifts_by_date}
 render :json => {:@data => @shifts_by_date}
@shifts_by_date
@data
continue
 all_shifts
exit
 all_shifts = shifts_by_date.sort_by{|t| t.datetime}
shifts_by_date
week_number
guard
continue
all_shifts.sort_by{|t| t.datetime}
all_shifts
exit
Time.at(date) + 7.days
Time.at(date)
Shift.where(:datetime => date..Time.at(date) + 7.days, :site_id => site_id
Shift.where(:datetime => Time.at(date)..Time.at(date) + 7.days, :site_id => site_id  )
week
continue
date_m = (date.strftime('%Y-')+date.strftime('%m-')+day_0.to_s).to_time
