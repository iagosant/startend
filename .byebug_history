c
!self.trainings.find_by(guard_id: user).completed_at.blank?
self.trainings.find_by(guard_id: user).completed_at.blank?
c
self.trainings.find_by(guard_id:user).completed_at.blank?
c
self.trainings.find_by(guard_id:user).completed_at.blank?
self.trainings.find_by(guard_id:user)
self.training.find_by(guard_id:user)
course.training.find_by(guard_id:user)
user
exit
c
params
c
params
c
@training
c
@training
exit
params
c
@not_completed_by
c
@completed_by
@completed
c
t_status == true
t_status = Training.find_by(guard_id: guard.id, course_id: @course.id).completed
guard
c
@not_completed
@completed
c
@not_completed
@not_completd
@completed
c
guard
c
@completed
@not_completed
c
@not_completed
@completed
c
guard
c
@not_completed
c
t_status == false
t_status = Training.find_by(guard_id: guard.id, course_id: @course.id).completed
@completed_by
c
t_status == false
t_status = Training.find_by(guard_id: guard.id, course_id: @course.id).completed
c
@course
c
guard
@not_completed_by
c
t_stauts == false
t_status = Training.find_by(guard_id: guard.id, course_id: @course.id).completed
t_status
a.completed
a = Training.find_by(guard_id: guard.id, course_id: @course.id)
Training.find_by(guard_id: guard.id, course_id: @course.id)
t_status
guard
t_stauts == false
c
t_status == false
t_status = Training.find_by(guard_id: guard.id, course_id: @course.id).completed
c
@completed_by
c
t_stauts = false
    t_status = Training.find_by(guard_id: guard.id, course_id: @course.id).completed
c
t_status.completed
t_status
 t_status = Training.find_by(guard_id: guard.id, course_id: @course.id)
c
@course.guards
@course
c
C
c
cc
c
@not_completed_by
@completed_by
c
@course
c
exit
@course
c
@course
c
@completed_by
c
exit
@not_completed_by
@completed_by
c
exit
@completed_by
@not_completed_by
c
@not_completed_by = Array.new
@completed_by = Array.new
exit
@course.guards
Training.find_by(course_id: @course.id)
@course
c
@course
c
params
c
@course = Course.create(course_params)
params
c
people = @guards.sort_by { |a| [ a.last_name] }
people = people.sort_by { |a| [ a.last_name] }
people = people.sort_by { |a| [ a.last_name, a.first_name ] }
@guards.sort_by(last_name)
@guards.sort
@guards.sort!
@guards = Guard.all
@guards
@guards.first
@guards.sort_by!{ |m| m.group.last_name.downcase }
@guards.sort_by(:last_name)
@guards.sort_by(last_name)
@guards.sort!
c
UserMailer.account_activation(@user).deliver_now
c
user
c
exit
UserMailer.account_activation(@user).deliver_now
@user
c
user_params
params
c
user_params
params
token
attribute
c
token
toke
attribute
c
user.authenticated?(:activation, params[:id])
user = User.find_by(email: params[:email])
user
user.authenticated?(:activation, params[:id])
c
user
@user
c
@user
c
self
c
user.authenticated?(:activation, params[:id])
c
user.authenticated?(:activation, params[:id])
user = User.find_by(email: params[:email])
user && !user.activated?
user = User.find_by(email: params[:email])
c
params
user
c
mail to: user.email, subject: "Account activation"
@user = user
@user
c
current_user
c
token
toke
c
params
c
user.authenticated?(:activation, params[:id])
continue
authenticated?(attribute, token)
digest.nil?
send("#{attribute}_digest")
continue
params
params[:activation_token]
user.activation_token
user
c
@user.activation_token
@user
token
exit
params[:id]
token
attribute
user.authenticated?(:activation, params[:id])
continue
exit
user.authenticated?(:activation, params[:id])
:activation
params[:id]
user.authenticated?
user.authenticated?(:activation, params[:id])
!user.activated?
user
c
user
session[:user_id]
c
 continue
continue
@user
continua
exit
continue
exit
continue
date_m
continue
Time.at(date)
 testD = Time.at(date) - (date.strftime('%w').to_i-1).days
date.strftime('%w')
(date.strftime('%w').to_i-1).days
 date
(date.strftime('%Y-')+date.strftime('%m-')+day_0.to_s).to_time
day_0
continue
user && user.authenticate(params[:password])
continue
user.id
user && user.authenticate(params[:password])
continue
user.authenticate(params[:password])
user && user.authenticate(params[:password])
 user = User.find_by_email(params[:email])
user.authenticate(params[:password])
 User.find_by_email(params[:email])
params[:email]
continue
@logged_user.role == "master" || @logged_user == @user
